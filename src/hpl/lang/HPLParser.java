
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package hpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public HPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\004\000\002\006\006\000\002\031\015\000\002" +
    "\007\026\000\002\007\016\000\002\005\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\003" +
    "\000\002\012\006\000\002\011\011\000\002\014\005\000" +
    "\002\014\003\000\002\014\006\000\002\014\005\000\002" +
    "\015\005\000\002\013\007\000\002\013\012\000\002\027" +
    "\003\000\002\027\003\000\002\026\005\000\002\026\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\004\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\016\002\uffcc\004\uffcc\005\uffcc\013\uffcc\035" +
    "\uffcc\041\uffcc\001\002\000\004\002\213\001\002\000\022" +
    "\002\ufffe\004\ufffe\005\ufffe\013\ufffe\031\ufffe\035\ufffe\041" +
    "\ufffe\042\ufffe\001\002\000\016\002\000\004\016\005\010" +
    "\013\013\035\014\041\015\001\002\000\022\002\ufffb\004" +
    "\ufffb\005\ufffb\013\ufffb\031\ufffb\035\ufffb\041\ufffb\042\ufffb" +
    "\001\002\000\010\007\121\021\117\035\114\001\002\000" +
    "\022\002\uffff\004\uffff\005\uffff\013\uffff\031\uffff\035\uffff" +
    "\041\uffff\042\uffff\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\013\ufffc\031\ufffc\035\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\014\015\040\021\063\032\042\033\041\035\046\001" +
    "\002\000\004\006\113\001\002\000\016\015\040\021\053" +
    "\032\042\033\041\035\046\043\051\001\002\000\004\035" +
    "\021\001\002\000\022\002\ufff9\004\ufff9\005\ufff9\013\ufff9" +
    "\031\ufff9\035\ufff9\041\ufff9\042\ufff9\001\002\000\022\002" +
    "\ufffa\004\ufffa\005\ufffa\013\ufffa\031\ufffa\035\ufffa\041\ufffa" +
    "\042\ufffa\001\002\000\004\023\022\001\002\000\006\024" +
    "\uffcc\035\023\001\002\000\010\022\uffe2\024\uffe2\026\uffe2" +
    "\001\002\000\010\022\uffe5\024\uffe5\026\036\001\002\000" +
    "\004\024\027\001\002\000\006\022\uffe4\024\uffe4\001\002" +
    "\000\004\021\030\001\002\000\006\022\uffcc\035\023\001" +
    "\002\000\004\022\032\001\002\000\004\027\033\001\002" +
    "\000\016\004\uffcc\005\uffcc\013\uffcc\031\uffcc\035\uffcc\041" +
    "\uffcc\001\002\000\016\004\016\005\010\013\013\031\035" +
    "\035\014\041\015\001\002\000\022\002\ufff6\004\ufff6\005" +
    "\ufff6\013\ufff6\031\ufff6\035\ufff6\041\ufff6\042\ufff6\001\002" +
    "\000\004\035\037\001\002\000\010\022\uffe3\024\uffe3\026" +
    "\uffe3\001\002\000\014\015\040\021\063\032\042\033\041" +
    "\035\046\001\002\000\050\002\uffd1\004\uffd1\005\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1" +
    "\024\uffd1\026\uffd1\027\uffd1\031\uffd1\035\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\001\002\000\050\002\uffd2\004\uffd2" +
    "\005\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2\031\uffd2\035\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\050\002" +
    "\uffcf\004\uffcf\005\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\022\uffcf\024\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002" +
    "\000\050\002\uffd3\004\uffd3\005\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\024\uffd3\026\uffd3" +
    "\027\uffd3\031\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\001\002\000\010\022\uffeb\027\uffeb\040\110\001\002" +
    "\000\050\002\uffce\004\uffce\005\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\022\uffce\024\uffce\026\uffce" +
    "\027\uffce\031\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\001\002\000\050\002\uffd7\004\uffd7\005\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\067\017\066\020\065\022\uffd7\024" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\035\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\004\027\101\001\002\000" +
    "\004\021\076\001\002\000\010\014\060\015\061\037\057" +
    "\001\002\000\016\015\040\021\053\032\042\033\041\035" +
    "\046\043\051\001\002\000\004\022\075\001\002\000\012" +
    "\014\060\015\061\022\056\037\057\001\002\000\050\002" +
    "\uffd0\004\uffd0\005\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\022\uffd0\024\uffd0\026\uffd0\027\uffd0\031" +
    "\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\001\002" +
    "\000\014\015\040\021\063\032\042\033\041\035\046\001" +
    "\002\000\014\015\040\021\063\032\042\033\041\035\046" +
    "\001\002\000\014\015\040\021\063\032\042\033\041\035" +
    "\046\001\002\000\050\002\uffd8\004\uffd8\005\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\067\017\066\020\065\022\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\031\uffd8\035\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\001\002\000\014\015\040\021\063\032" +
    "\042\033\041\035\046\001\002\000\010\014\060\015\061" +
    "\022\056\001\002\000\014\015\040\021\063\032\042\033" +
    "\041\035\046\001\002\000\014\015\040\021\063\032\042" +
    "\033\041\035\046\001\002\000\014\015\040\021\063\032" +
    "\042\033\041\035\046\001\002\000\050\002\uffd6\004\uffd6" +
    "\005\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\022\uffd6\024\uffd6\026\uffd6\027\uffd6\031\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002\000\050\002" +
    "\uffd5\004\uffd5\005\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\022\uffd5\024\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002" +
    "\000\050\002\uffd4\004\uffd4\005\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\031\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\001\002\000\050\002\uffd9\004\uffd9\005\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\067\017\066\020\065\022\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\031\uffd9\035\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\014\014\060\015\061\022" +
    "\uffe8\027\uffe8\040\uffe8\001\002\000\006\022\uffe9\027\uffe9" +
    "\001\002\000\016\015\040\021\053\032\042\033\041\035" +
    "\046\043\051\001\002\000\004\022\100\001\002\000\006" +
    "\022\uffea\027\uffea\001\002\000\020\004\uffcc\005\uffcc\013" +
    "\uffcc\031\uffcc\035\uffcc\041\uffcc\042\uffcc\001\002\000\020" +
    "\004\016\005\010\013\013\031\104\035\014\041\015\042" +
    "\103\001\002\000\004\027\105\001\002\000\022\002\uffe7" +
    "\004\uffe7\005\uffe7\013\uffe7\031\uffe7\035\uffe7\041\uffe7\042" +
    "\uffe7\001\002\000\016\004\uffcc\005\uffcc\013\uffcc\031\uffcc" +
    "\035\uffcc\041\uffcc\001\002\000\016\004\016\005\010\013" +
    "\013\031\107\035\014\041\015\001\002\000\022\002\uffe6" +
    "\004\uffe6\005\uffe6\013\uffe6\031\uffe6\035\uffe6\041\uffe6\042" +
    "\uffe6\001\002\000\016\015\040\021\053\032\042\033\041" +
    "\035\046\043\051\001\002\000\006\022\uffec\027\uffec\001" +
    "\002\000\050\002\uffcd\004\uffcd\005\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\024\uffcd\026" +
    "\uffcd\027\uffcd\031\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\001\002\000\010\007\121\021\117\035\114\001" +
    "\002\000\032\002\ufff1\004\ufff1\005\ufff1\013\ufff1\022\ufff1" +
    "\023\127\026\ufff1\030\ufff1\031\ufff1\035\ufff1\041\ufff1\042" +
    "\ufff1\001\002\000\022\002\ufffd\004\ufffd\005\ufffd\013\ufffd" +
    "\031\ufffd\035\ufffd\041\ufffd\042\ufffd\001\002\000\030\002" +
    "\ufff2\004\ufff2\005\ufff2\013\ufff2\022\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\035\ufff2\041\ufff2\042\ufff2\001\002\000\010\007" +
    "\121\021\117\035\114\001\002\000\030\002\uffef\004\uffef" +
    "\005\uffef\013\uffef\022\uffef\026\uffef\030\uffef\031\uffef\035" +
    "\uffef\041\uffef\042\uffef\001\002\000\004\021\122\001\002" +
    "\000\004\036\123\001\002\000\004\022\124\001\002\000" +
    "\030\002\uffee\004\uffee\005\uffee\013\uffee\022\uffee\026\uffee" +
    "\030\uffee\031\uffee\035\uffee\041\uffee\042\uffee\001\002\000" +
    "\004\022\126\001\002\000\030\002\ufff0\004\ufff0\005\ufff0" +
    "\013\ufff0\022\ufff0\026\ufff0\030\ufff0\031\ufff0\035\ufff0\041" +
    "\ufff0\042\ufff0\001\002\000\016\015\040\021\063\024\uffcc" +
    "\032\042\033\041\035\046\001\002\000\004\024\uffde\001" +
    "\002\000\004\024\136\001\002\000\012\014\060\015\061" +
    "\024\uffe0\026\uffe0\001\002\000\006\024\uffdf\026\134\001" +
    "\002\000\014\015\040\021\063\032\042\033\041\035\046" +
    "\001\002\000\012\014\060\015\061\024\uffe1\026\uffe1\001" +
    "\002\000\004\021\137\001\002\000\012\007\121\021\117" +
    "\022\uffcc\035\114\001\002\000\004\022\146\001\002\000" +
    "\006\022\uffdc\026\uffdc\001\002\000\006\022\uffdb\026\144" +
    "\001\002\000\004\022\uffda\001\002\000\010\007\121\021" +
    "\117\035\114\001\002\000\006\022\uffdd\026\uffdd\001\002" +
    "\000\030\002\uffed\004\uffed\005\uffed\013\uffed\022\uffed\026" +
    "\uffed\030\uffed\031\uffed\035\uffed\041\uffed\042\uffed\001\002" +
    "\000\026\002\ufff3\004\ufff3\005\ufff3\013\ufff3\014\060\015" +
    "\061\031\ufff3\035\ufff3\041\ufff3\042\ufff3\001\002\000\024" +
    "\002\ufff8\004\ufff8\005\ufff8\013\ufff8\030\151\031\ufff8\035" +
    "\ufff8\041\ufff8\042\ufff8\001\002\000\006\010\153\011\154" +
    "\001\002\000\022\002\ufff7\004\ufff7\005\ufff7\013\ufff7\031" +
    "\ufff7\035\ufff7\041\ufff7\042\ufff7\001\002\000\004\021\170" +
    "\001\002\000\004\021\155\001\002\000\004\021\156\001" +
    "\002\000\014\015\040\021\063\032\042\033\041\035\046" +
    "\001\002\000\010\014\060\015\061\026\160\001\002\000" +
    "\014\015\040\021\063\032\042\033\041\035\046\001\002" +
    "\000\010\014\060\015\061\022\162\001\002\000\004\026" +
    "\163\001\002\000\014\015\040\021\063\032\042\033\041" +
    "\035\046\001\002\000\010\014\060\015\061\026\165\001" +
    "\002\000\014\015\040\021\063\032\042\033\041\035\046" +
    "\001\002\000\010\014\060\015\061\022\167\001\002\000" +
    "\022\002\ufff4\004\ufff4\005\ufff4\013\ufff4\031\ufff4\035\ufff4" +
    "\041\ufff4\042\ufff4\001\002\000\004\021\171\001\002\000" +
    "\014\015\040\021\063\032\042\033\041\035\046\001\002" +
    "\000\010\014\060\015\061\026\173\001\002\000\014\015" +
    "\040\021\063\032\042\033\041\035\046\001\002\000\010" +
    "\014\060\015\061\022\175\001\002\000\004\026\176\001" +
    "\002\000\004\021\177\001\002\000\014\015\040\021\063" +
    "\032\042\033\041\035\046\001\002\000\010\014\060\015" +
    "\061\026\201\001\002\000\014\015\040\021\063\032\042" +
    "\033\041\035\046\001\002\000\010\014\060\015\061\022" +
    "\203\001\002\000\004\026\204\001\002\000\004\021\205" +
    "\001\002\000\014\015\040\021\063\032\042\033\041\035" +
    "\046\001\002\000\010\014\060\015\061\026\207\001\002" +
    "\000\014\015\040\021\063\032\042\033\041\035\046\001" +
    "\002\000\010\014\060\015\061\022\211\001\002\000\004" +
    "\022\212\001\002\000\022\002\ufff5\004\ufff5\005\ufff5\013" +
    "\ufff5\031\ufff5\035\ufff5\041\ufff5\042\ufff5\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\010\002\003\003\005\030\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\010\005\006" +
    "\006\011\013\016\031\017\001\001\000\002\001\001\000" +
    "\010\010\147\011\117\012\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\146\017\046\020\042\021" +
    "\043\001\001\000\002\001\001\000\016\014\047\015\044" +
    "\016\051\017\046\020\042\021\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\023\027\024\030\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\023\027\030\030\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\033" +
    "\030\004\001\001\000\014\004\010\005\006\006\011\013" +
    "\016\031\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\042\021\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\053\015\044\016\054\017\046\020\042\021" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\073\017\046\020\042\021\043\001" +
    "\001\000\010\017\072\020\042\021\043\001\001\000\010" +
    "\017\061\020\042\021\043\001\001\000\002\001\001\000" +
    "\012\016\063\017\046\020\042\021\043\001\001\000\002" +
    "\001\001\000\006\020\042\021\071\001\001\000\006\020" +
    "\042\021\070\001\001\000\006\020\042\021\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\076\015\044\016\051\017\046\020\042\021\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\101" +
    "\030\004\001\001\000\014\004\010\005\006\006\011\013" +
    "\016\031\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\105\030\004\001\001\000\014\004\010\005" +
    "\006\006\011\013\016\031\017\001\001\000\002\001\001" +
    "\000\016\014\110\015\044\016\051\017\046\020\042\021" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\114\011\117\012\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\124\011\117" +
    "\012\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\131\017\046\020" +
    "\042\021\043\022\132\023\130\030\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\134\017\046\020\042\021\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\140\011" +
    "\117\012\115\024\141\025\137\030\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\144\011\117\012\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\156\017\046\020\042\021\043\001\001\000\002\001\001" +
    "\000\012\016\160\017\046\020\042\021\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\163\017\046" +
    "\020\042\021\043\001\001\000\002\001\001\000\012\016" +
    "\165\017\046\020\042\021\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\171\017" +
    "\046\020\042\021\043\001\001\000\002\001\001\000\012" +
    "\016\173\017\046\020\042\021\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\177" +
    "\017\046\020\042\021\043\001\001\000\002\001\001\000" +
    "\012\016\201\017\046\020\042\021\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\205\017\046\020\042\021\043\001\001\000\002\001\001" +
    "\000\012\016\207\017\046\020\042\021\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// No longer necessary		
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		HPLLexer lexer;

		public HPLParser(HPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public HPLParser(String file) throws FileNotFoundException {
	            this(new HPLLexer(new FileReader(file)));
		}

                public HPLParser(InputStream is) {
                    this(new HPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HPLParser$actions {

          
  private final HPLParser parser;

  /** Constructor */
  CUP$HPLParser$actions(HPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HPLParser$do_action_part00000000(
    int                        CUP$HPLParser$act_num,
    java_cup.runtime.lr_parser CUP$HPLParser$parser,
    java.util.Stack            CUP$HPLParser$stack,
    int                        CUP$HPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HPLParser$result;

      /* select the action based on the action number */
      switch (CUP$HPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRProgram start_val = (PIRProgram)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		RESULT = start_val;
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HPLParser$parser.done_parsing();
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              PIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRSequence seq = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		RESULT = new PIRProgram(seq);
	    
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              PIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence seq = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRStatement s = (PIRStatement)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		  seq.addStatement(s);
		  RESULT = seq; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              PIRSequence RESULT =null;
		
		  RESULT = new PIRSequence(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= VAR ASSIGN painterExp 
            {
              PIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRAssignment(id, e); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= paintStmt 
            {
              PIRStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRPaintStmt s = (PIRPaintStmt)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= waitStmt 
            {
              PIRStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRStatement s = (PIRStatement)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= funDefinition 
            {
              PIRStatement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRFunDefinition fd = (PIRFunDefinition)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = fd; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= conditionStmt 
            {
              PIRStatement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRConditionalStatement cs = (PIRConditionalStatement)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = cs; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paintStmt ::= PAINT painterExp 
            {
              PIRPaintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRPaintStmt(e); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paintStmt",4, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paintStmt ::= PAINT painterExp IN frameExp 
            {
              PIRPaintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRFrameExp fe = (PIRFrameExp)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRPaintStmt(e,fe); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paintStmt",4, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funDefinition ::= DEF_PAINTER VAR LBRACKET paramListE RBRACKET LPAREN paramListE RPAREN COLON stmtList END 
            {
              PIRFunDefinition RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).value;
		int aParamsleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).left;
		int aParamsright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).right;
		ArrayList<String> aParams = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).value;
		int pParamsleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int pParamsright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ArrayList<String> pParams = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence statements = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
						RESULT = new PIRFunDefinition(fn, aParams,pParams,statements);
						
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("funDefinition",23, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // frameExp ::= FRAME LPAREN LPAREN arithExp COMMA arithExp RPAREN COMMA LPAREN arithExp COMMA arithExp RPAREN COMMA LPAREN arithExp COMMA arithExp RPAREN RPAREN 
            {
              PIRFrameExp RESULT =null;
		int oxleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).left;
		int oxright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).right;
		ASTExp<AIRExp> ox = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).value;
		int oyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).left;
		int oyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).right;
		ASTExp<AIRExp> oy = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).value;
		int uxleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).left;
		int uxright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).right;
		ASTExp<AIRExp> ux = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).value;
		int uyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).left;
		int uyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).right;
		ASTExp<AIRExp> uy = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).value;
		int vxleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int vxright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ASTExp<AIRExp> vx = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int vyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int vyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> vy = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		 
	        RESULT = new PIRFrameExp(ox, oy, ux, uy, vx, vy); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("frameExp",5, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-19)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // frameExp ::= SUBFRAME LPAREN LPAREN arithExp COMMA arithExp RPAREN COMMA arithExp COMMA arithExp RPAREN 
            {
              PIRFrameExp RESULT =null;
		int oxleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).left;
		int oxright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).right;
		ASTExp<AIRExp> ox = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).value;
		int oyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).left;
		int oyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).right;
		ASTExp<AIRExp> oy = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).value;
		int uxleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).left;
		int uxright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).right;
		ASTExp<AIRExp> ux = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).value;
		int vyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int vyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<AIRExp> vy = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 
			AIRExpInt uy = new AIRExpInt(0);
			AIRExpInt vx = new AIRExpInt(0);
	        RESULT = new PIRFrameExp(ox, oy, ux, uy, vx, vy); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("frameExp",5, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-11)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // waitStmt ::= WAIT arithExp 
            {
              PIRStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRWaitStmt(t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("waitStmt",3, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // painterExp ::= primitiveExp 
            {
              ASTExp<PIRExp> RESULT =null;
		int primExpleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int primExpright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> primExp = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = primExp; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // painterExp ::= VAR 
            {
              ASTExp<PIRExp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTVar<PIRExp>(v); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // painterExp ::= LPAREN painterExp RPAREN 
            {
              ASTExp<PIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = e; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // painterExp ::= funCall 
            {
              ASTExp<PIRExp> RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRFunCall fc = (PIRFunCall)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitiveExp ::= IMG_PAINTER LPAREN STRING RPAREN 
            {
              ASTExp<PIRExp> RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 
                         RESULT = new PIRImagePainter(file); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("primitiveExp",8, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funCall ::= VAR LBRACKET aExpListE RBRACKET LPAREN pExpListE RPAREN 
            {
              PIRFunCall RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int paintersleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int paintersright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ArrayList<ASTExp<PIRExp>> painters = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
			RESULT = new PIRFunCall(fn,lst,painters);
	
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("funCall",7, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logicExp ::= logicFactor LCMP logicExp 
            {
              ASTExp<LogicExp> RESULT =null;
		int lf1left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lf1right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<LogicExp> lf1 = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		String opt = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		int lf2left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lf2right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<LogicExp> lf2 = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new LogicExpCmpLog(lf1,lf2,opt); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logicExp ::= logicFactor 
            {
              ASTExp<LogicExp> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<LogicExp> le = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = le; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logicExp ::= NOT LPAREN logicExp RPAREN 
            {
              ASTExp<LogicExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<LogicExp> e = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = new LogicExpCmpLog(e); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logicExp ::= LPAREN logicExp RPAREN 
            {
              ASTExp<LogicExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<LogicExp> e = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = e; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logicFactor ::= arithExp CMP arithExp 
            {
              ASTExp<LogicExp> RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> op1 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		String opt = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> op2 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new LogicExpCmpAIR(op1,op2,opt); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("logicFactor",11, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conditionStmt ::= IF logicExp COLON stmtList END 
            {
              PIRConditionalStatement RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).right;
		ASTExp<LogicExp> le = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence lst = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = new PIRConditionalStatement(le,lst); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("conditionStmt",9, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conditionStmt ::= IF logicExp COLON stmtList ELSE COLON stmtList END 
            {
              PIRConditionalStatement RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).right;
		ASTExp<LogicExp> le = (ASTExp<LogicExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		PIRSequence lst = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int lst2left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence lst2 = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = new PIRConditionalStatement(le,lst,lst2); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("conditionStmt",9, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",21, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",21, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		lst.add(id);
		RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		RESULT = new ArrayList<>();
		RESULT.add(id);
	      
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
	          lst.add(e);
		  RESULT = lst;
	     
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",16, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aExpList ::= arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		  RESULT = new ArrayList<>();
		  RESULT.add(e);
	     
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",16, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aExpListE ::= aExpList 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",17, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aExpListE ::= empty 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",17, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pExpList ::= pExpList COMMA painterExp 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<ASTExp<PIRExp>> lst = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
					lst.add(e);
					RESULT = lst;
				
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpList",18, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pExpList ::= painterExp 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					RESULT.add(e);
					
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpList",18, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pExpListE ::= pExpList 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<ASTExp<PIRExp>> lst = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpListE",19, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pExpListE ::= empty 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpListE",19, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithExp ::= arithExp PLUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithExp ::= arithExp MINUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithExp ::= arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("*", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithTerm ::= arithTerm DIV arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("/", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithTerm ::= arithTerm MOD arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("%", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithTerm ::= arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithConstFactor ::= INTEGER 
            {
              ASTExp<AIRExp> RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(ilit); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",14, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithConstFactor ::= FRACTION 
            {
              ASTExp<AIRExp> RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		Double frac = (Double)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new AIRExpFrac(frac); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",14, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithConstFactor ::= LPAREN arithExp RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = e; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",14, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithFactor ::= arithConstFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> cf = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = cf; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithFactor ::= VAR 
            {
              ASTExp<AIRExp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTVar(var); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithFactor ::= MINUS arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 
		      RESULT = new ASTUnaryExp<AIRExp>("-", f); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // empty ::= 
            {
              Object RESULT =null;

              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("empty",22, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HPLParser$do_action(
    int                        CUP$HPLParser$act_num,
    java_cup.runtime.lr_parser CUP$HPLParser$parser,
    java.util.Stack            CUP$HPLParser$stack,
    int                        CUP$HPLParser$top)
    throws java.lang.Exception
    {
              return CUP$HPLParser$do_action_part00000000(
                               CUP$HPLParser$act_num,
                               CUP$HPLParser$parser,
                               CUP$HPLParser$stack,
                               CUP$HPLParser$top);
    }
}

}
